- hosts: "{{hosts_name}}"
  gather_facts: false
  vars_files: ["vars.yaml"]

  tasks:
  ####
  - name: setup
    setup: {"filter": "ansible_date_time"}

  ####
  - name: ping
    tags: ["prepare"]
    win_ping:

  - name: copy execute.py
    tags: ["prepare", "copy_script"]
    win_copy: {"src": "./execute.py", "dest": "{{work_path}}"}

  ####
  - name: run job
    tags: ["start"]
    async: 1
    poll: 0
    args: {"chdir": "{{work_path}}"}
    win_command: python .\execute.py run {{win_cmd}}

  - name: wait for pidfile
    tags: ["start"]
    # must greater than "time.sleep(v)" before "proc.poll()" in scripts/execute.py
    win_wait_for: {"timeout": 5, "path": "{{work_path}}\\{{command_md5}}.pid"}

  ####
  - name: execute job
    tags: ["execute"]
    args: {"chdir": "{{work_path}}"}
    win_command: python .\execute.py {{call}} {{win_cmd}}


  ####
  - name: fetch run log
    tags: ["get_log"]
    fetch:
      src: "{{work_path}}\\{{ command_md5 }}.log"
      dest: ./logs/
      flat: true
      validate_checksum: false

  - name: fetch program log
    tags: ["get_log"]
    fetch:
      src: "{{work_path}}\\{{program}}\\Saved\\Logs\\{{program}}.log"
      dest: ./logs/
      flat: true
      validate_checksum: false

  ####
  - name: job status
    tags: ["get_status"]
    register: job_status
    args: {"chdir": "{{work_path}}"}
    win_command: python .\execute.py status {{win_cmd}}

  - name: read status
    tags: ["get_status"]
    debug: var=job_status.stdout_lines

  - name: save status
    tags: ["get_status"]
    local_action:
      module: lineinfile
      line: "{{lookup('pipe', 'date --rfc-3339=seconds | sed \"s/ /T/\"')}}\t{{job_status.stdout_lines[0]}}"
      create: true
      insertafter: EOF
      dest: status.log
